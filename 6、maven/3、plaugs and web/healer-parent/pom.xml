<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.hlj.maven</groupId>
  <artifactId>healer-parent</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  
 <!-- 14 、实现父类UTF-8 -->	  
  	<url>http://maven.apache.org</url>
    <properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 <!-- 27、配置插件的sql-maven-plugin  -->	  		
		<jdbc.driver>com.mysql.jdbc.Driver</jdbc.driver>
		<jdbc.url>jdbc:mysql://localhost:3306</jdbc.url>
		<jdbc.username>root</jdbc.username>
		<jdbc.password>147094</jdbc.password>
		<catalina.home>D:\ProgramFiles\Study\tomcat6</catalina.home>		
	</properties>
	
 <!-- 13 、实现聚合 -->	
  		<!-- 导入了三个模块，把这三个模块聚合在一起了 -->
	<modules> 
		<!-- 聚合是模块的位置 -->
		<module>../healer-core</module>
		<module>../healer-log</module>
		<module>../healer-service</module>
	</modules>
  
  
  
  	<dependencyManagement>
  			<dependencies>
	<!-- 0、junit -->
			<!-- <scope>test</scope> 测试有效-->			
	  			<dependency>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
					<version>4.10</version>
					<scope>test</scope>
				</dependency>
	 <!--1、  hibernate -->
	  			<dependency>
					<groupId>org.hibernate</groupId>
					<artifactId>hibernate-core</artifactId>
					<version>4.1.10.Final</version>
				</dependency>
				
	<!-- 2、   mysql  效-->
			<!-- <scope>runtime</scope> 运行有效-->			
	  			<dependency>
					<groupId>mysql</groupId>
					<artifactId>mysql-connector-java</artifactId>
					<version>5.1.24</version>
					<scope>runtime</scope>
				</dependency>
	<!-- 3、log4j	 -->		
				<dependency>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
					<version>1.2.17</version>
				</dependency>
				
	<!-- 4、dbunit -->			
				<dependency>
					<groupId>dbunit</groupId>
					<artifactId>dbunit</artifactId>
					<version>2.2</version>
				</dependency>
	<!-- 				
	5、junit 已存在
	  			<dependency>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
					<version>4.10</version>
					<scope>test</scope>
				</dependency> -->
	<!-- 6、commons-logging -->
				
				<dependency>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
					<version>1.1.1</version>
				</dependency>
	<!--
	  7、log4j 已经存在
				
				<dependency>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
					<version>1.2.17</version>
				</dependency> -->
				
	<!-- 9、healer-core -->	  
			
		    <dependency>
				<groupId>com.hlj.maven</groupId>
				<artifactId>healer-core</artifactId>
				<version>0.0.1-SNAPSHOT</version>			
			</dependency>
		
	<!-- 10、healer-log 使用下面的变量不能够跳过去-->	  		 
			<dependency> 
				<groupId>${project.groupId}</groupId>
				<artifactId>healer-log</artifactId>
				<version>${project.version}</version>			
			<!-- 12 、排除依赖 exclusions-->	  			
				<exclusions>
						<!-- 可以排除依赖 -->
						<exclusion>
							<groupId>commons-logging</groupId>
							<artifactId>commons-logging</artifactId>
						</exclusion>
				</exclusions>	
			</dependency>
      <!-- 34、-->	  		 	        			
		    <dependency>
				<groupId>com.hlj.maven</groupId>
				<artifactId>healer-service</artifactId>
				<version>${project.version}</version>							
			</dependency>			
		<!-- 11、easymock 单元测试-->	  		 
			<dependency>
				<groupId>org.easymock</groupId>
				<artifactId>easymock</artifactId>
				<version>3.1</version>
				<scope>test</scope>
			</dependency>
			
		<!-- 31、servlet 提供给healer-web项目 -->	  		 
			<dependency>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>servlet-api</artifactId>
				<version>2.5.20110712</version>
				<scope>provided</scope>
			</dependency>

			 
		  </dependencies>
  	</dependencyManagement>
  
  
<!--    <repositories> 
   
   下面这个将来为了开发中能够依靠不用的开发环境而使用不同的url 地址（localhost会变化）仓库，
                     为了不更改代码，所以配置到了maven的 server.xml的配置文件中去了
   		<repository> 
   			<id>nexus</id> 
   			<name>Nexus Repository</name> 
	18、如果从中央工厂下载，不全所以才有下面这个	http://localhost:8081/nexus/content/repositories/central/
			<url>http://localhost:8081/nexus/content/groups/public/</url> 
			<releases>  releases 默认是开启的，这里true即可
				<enabled>true</enabled> 
		    </releases> 
		    <snapshots>  snapshots默认是关闭的，需要手动开启
				<enabled>true</enabled> 
			</snapshots> 
		</repository> 
	</repositories>  -->
  
<!--   
	19、发布工厂，系统提供的 ，id和name都是自己起的
	<distributionManagement>
		<repository>
			<id>healer-release</id>
			<name>healer release resp</name>
			<url>http://localhost:8081/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>healer-snapshots</id>
			<name>healer snapshots resp</name>
			<url>http://localhost:8081/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>
   -->
 
    <!-- 	20、发布到自己建立的工厂  -->
   <distributionManagement>
		<repository>
			<id>healer-release</id>
			<name>healer-snapshots reposirory</name>
			<url>http://localhost:8081/nexus/content/repositories/healer-releases/</url>
		</repository>
		<snapshotRepository>
			<id>healer-snapshots</id>
			<name>healer-snapshots reposirory</name>
			<url>http://localhost:8081/nexus/content/repositories/healer-snapshots/</url>
		</snapshotRepository>
	</distributionManagement>
 
 
 <!-- 23、从healer-service拷贝过来的插件，开始在父类中使用	 -->			  
 	<build>
		<pluginManagement>					  
    <!-- 22、插件的使用	 -->
			<plugins>
	<!-- 23、将java代码引入jar包中（包括main、test下的java，但是没有class）healer-service 使用，	 -->			
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
				     <artifactId>maven-source-plugin</artifactId>
				     <version>2.2.1</version>
				     <executions>
							<execution>
								<phase>compile</phase> <!-- 执行完compile再执行下面的命令 -->
								<goals>
									<goal>jar</goal>
							   <!-- <goal>test jar</goal>-->
	 							</goals>
							</execution>
						</executions>
			     </plugin>
 <!-- 24、compiler 改变jdk的版本，以及skip 跳过测试类的有问题，healer-service 使用，	 -->			  
			     <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.0</version>
					<configuration>
						<source>1.6</source>
						<target>1.6</target>
						<!-- 此处设置了skip等于设置了把所有的测试编译都跳过，如果测试类写得有问题，也不会报错，所以一般不使用 -->
						<!-- <skip>true</skip> -->
					</configuration>
				</plugin>
				
 <!-- 25、rar 将自己项目所有的依赖导入到rar包中，包括 自己依赖的其他项目 ，healer-service 使用，	
 			<includeJar>true</includeJar> 表示是否包含自己  -->			  				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-rar-plugin</artifactId>
					<version>2.3</version>
					<executions>
						<execution>
							<phase>package</phase>						
							<goals>
								<goal>rar</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
					 <!-- 是否包含有我们自己的jar包 true 包含 -->
						<includeJar>true</includeJar>
					</configuration>
				</plugin>
 <!-- 26、sql-maven-plugin 编译时候 创建数据库 test时候创建表	，healer-core 使用，	-->			
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>sql-maven-plugin</artifactId>
					<version>1.5</version>
					<!-- 使用插件依然可以指定相应的依赖 ,但是仅仅在插件编译的时候有用-->
					<dependencies>
						<dependency>
							<groupId>mysql</groupId>
							<artifactId>mysql-connector-java</artifactId>
							<version>5.1.24</version>
						</dependency>
					</dependencies>
					 <!-- 因为我们上面设置了property标签，里面设置了值，所以能够使用 ${jdbc.driver}-->
					<configuration>
						<driver>${jdbc.driver}</driver>
						<url>${jdbc.url}</url>
						<username>${jdbc.username}</username>
						<password>${jdbc.password}</password>
					</configuration>
					<executions>
						<execution>
							<id>create-db</id>
							<phase>compile</phase>
							<goals>
								<goal>execute</goal><!--  编译之后执行下面的sql语句 -->
							</goals>
							<configuration>
								<sqlCommand>create database IF NOT EXISTS itat_maven_test</sqlCommand>
							</configuration>
						</execution>
						<execution>
							<id>init-table</id>
							<phase>test-compile</phase>
							<goals>
								<goal>execute</goal>
							</goals>
							<configuration>
								<srcFiles>
									<srcFile>src/main/resources/init.sql</srcFile>
								</srcFiles>
							</configuration>
						</execution>
					</executions>
				</plugin>
 <!-- 28、lifecycle-mapping  ，healer-core 使用，	但是不需要写入healer-core
 		解决healer-core使用sql-maven-plugin 出现的报错信息(虽然不影响编译，但是看着不舒服)	-->											
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>sql-maven-plugin</artifactId>
										<versionRange>[1.5,)</versionRange>
										<goals>
											<goal>execute</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions> 
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>	
				
 <!-- 29、maven-surefire-plugin  healer-core 测试使用，但是不需要写入healer-core
 		解决类名不是 Test** 、**Test、 ** TestCase 可以正常接受test命令测试  -->
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.14</version>
					<configuration>
						<!-- 设置包含的测试类 -->
						<includes>
						   <include>**/Hello*</include> 
						 </includes>
						<!-- 设置不进行测试的类 -->
						<excludes> 
						    <exclude>Test*</exclude> 
						 </excludes> 
						<!-- 跳过测试阶段，一般不推荐跳过 -->
						<!-- <skip>true</skip> -->
					</configuration>
				</plugin>	
<!-- 34、copy-maven-plugin 拷贝插件，将war项目自动复制到tomcat目录下-->	  		 	       						
				<!-- <plugin>
					<groupId>com.github.goldin</groupId>
					<artifactId>copy-maven-plugin</artifactId>
					<version>0.2.5</version>
     				<executions>
						<execution>
							<id>copy-war</id>
							<phase>package</phase>
							<goals>
								<goal>copy</goal>
							</goals>
							<configuration>
								<resources>
									<resource>
									目标路径 tomcat路径  是个常亮我们在上面propertis中设置
										<targetPath>${catalina.home}/webapps</targetPath>
									自己的war文件夹 目录
										<directory>${project.build.directory}</directory> 
									拷贝的文件
										<includes>
											<include>healer-web.war</include>
										</includes>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin> -->
<!-- 36、自动启动tomcat项目，并且可以设置端口，以及上下文路径-->	  		 	       											
				<plugin>
				  <groupId>org.mortbay.jetty</groupId>
				  <artifactId>jetty-maven-plugin</artifactId>
				  <configuration>
				<!-- 每10秒钟 检测包是否更新，在修改了项目中可以10秒后重新加载 相当于热部署-->
				    <scanIntervalSeconds>10</scanIntervalSeconds>
				<!-- 修改项目上下文路径，也就是项目启动的名字 -->
				    <webApp>
				      <contextPath>/healerjean</contextPath>
				    </webApp>
				<!-- 修改端口 -->
				    <connectors>
				       <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
				          <port>8787</port>
				          <maxIdleTime>60000</maxIdleTime>
				       </connector>
				     </connectors>
				  </configuration>
				</plugin>	
			</plugins> 
		</pluginManagement>
	</build>	
</project>