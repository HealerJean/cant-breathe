<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
 xmlns:context="http://www.springframework.org/schema/context"  
 xmlns:p="http://www.springframework.org/schema/p"  
 xmlns:mvc="http://www.springframework.org/schema/mvc"  
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
 xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
              
	
  

			<!--  针对于web中的 / 
			在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，
			会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
			它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
			就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。
			一般Web应用服务器默认的Servlet名称是"default"，因此DefaultServletHttpRequestHandler可以找到它。
			如果你所有的Web应用服务器的默认Servlet名称不是"default"，则需要通过default-servlet-name属性显示指定：
				<mvc:default-servlet-handler default-servlet-name="所使用的Web服务器默认使用的Servlet名称" />
			-->
 <mvc:default-servlet-handler/>
 
 
			<!--  
			使用了<mvc:annotation-driven />， 它会自动注册DefaultAnnotationHandlerMapping 
			与AnnotationMethodHandlerAdapter 这两个bean,所以就没有机会再给它注入interceptors属性，就无法指定拦截器。			
			当然我们可以通过人工配置上面的两个Bean，不使用 <mvc:annotation-driven />，就可以 给interceptors属性 注入拦截器了。
			  -->
			<!-- 配置注解驱动 -->
<mvc:annotation-driven/>
    
    
   <!--  InternalResourceViewResolver视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/"></property>
    <!-- 后缀 -->
        <property name="suffix" value=".jsp"></property>
    </bean>
    
    
    <!-- spring mvc 提供注解支持 -->
<!-- scan the package and the sub package -->
    <context:component-scan base-package="com">
        <context:include-filter type="annotation"
            expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation"
            expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>
    
    
    
    
 </beans>